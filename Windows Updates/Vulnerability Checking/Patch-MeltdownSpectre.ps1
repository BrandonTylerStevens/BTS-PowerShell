Function Patch-MeltdownSpectre
{
########################################################
# Vars for OS Specific Patches against Kernel Exploits #
########################################################

# Microsoft Standalone patch for 2008 R2 servers that protects against Windows Kernel Exploits seen with Meltdown/Spectre
$KB4056897 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/windows6.1-kb4056897-x64_2af35062f69ce80c4cd6eef030eda31ca5c109ed.msu"
$win2k8r2patchinstalldesination = "$workdir\KB4056897.msu"

# Server 2012 does not have an update form MS yet to patch these exploits.

# Microsoft Standalone patch for 2012 R2 servers that protects against Windows Kernel Exploits seen with Meltdown/Spectre
$KB4056898 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/windows8.1-kb4056898-x64_ad6c91c5ec12608e4ac179b2d15586d244f0d2f3.msu"
$win2k12r2patchinstalldestination = "$workdir\KB4056898.msu"

# Microsoft Standalone patch for 2016 servers that protects against Windows Kernel Exploits seen with Meltdown/Spectre
$KB4056890 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/windows10.0-kb4056890-x64_delta_dedf5675b6667189ac8445cdf062abe866c68435.msu"
$win2k16patchinstalldestination = "$workdir\KB4056890.msu"

##############################################################################
# Vars for Windows Management Framework 5.0 download for specific OS Version #
##############################################################################

#This the WMF 5.0 that will download and get the correct standalone updater for 2008 R2 servers not running WMF 5.0 yet
$Srv2k8R2WMF5 = "https://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/Win7AndW2K8R2-KB3134760-x64.msu"
$WMF5win2k8r2installdestination = "$workdir\Win7AndW2K8R2-KB3134760-x64.msu"

#This the WMF 5.0 that will download and get the correct standalone updater for 2012 R2 servers not running WMF 5.0 yet
$Srv2k12R2WMF5 = "https://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/Win8.1AndW2K12R2-KB3134758-x64.msu"
$WMF5win2k12r2installdestination = "$workdir\Win8.1AndW2K12R2-KB3134758-x64.msu"

# Server 2016 ships with WMF 5.0 or higher

# Function to set PowerShell repository and install the NuGet Package Provider
Function Check-PSRepoSettings {
[cmdletbinding()]
Param()
Get-PackageProvider
Get-PSRepository
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -ErrorAction stop
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
}

# Function to determine if the dependancies are installed before Installing the Speculation module
Function Correct-PSVersion {
[cmdletbinding()]
Param()
Check-PSRepoSettings
Install-Module SpeculationControl
}

# This function downloads and installs Windows Management Framework 5.0
Function WMF5-Installer {
[cmdletbinding()]
Param()
IF ($OSVersion.Caption -like 'Microsoft Windows Server 2008 R2*') {
    # Downloads the Standalone Update for the Windows Management Framework 5.0 for Server 2008 R2
        IF (Get-Command 'Invoke-WebRequest'){
            Invoke-WebRequest $Srv2k8R2WMF5 -OutFile $WMF5win2k8r2installdestination
        }
        Else {
            $WebClient = New-Object System.Net.WebClient
            $webclient.DownloadFile($Srv2k8R2WMF5, $WMF5win2k8r2installdestination)
        }

    #(WARNING: Requires Reboot & then this script needs to be ran again after the server reboot to complete successfully!!!)
    # Runs Standalone Update for the Windows Management Framework 5.0 for Server 2008 R2
    wusa "$workdir\Win7AndW2K8R2-KB3134760-x64.msu" /quiet /norestart | Out-Null
}
Else {
    # Downloads the Standalone Update for the Windows Management Framework 5.0 for Server 2012 R2
        IF (Get-Command 'Invoke-WebRequest'){
            Invoke-WebRequest $Srv2k12R2WMF5 -OutFile $WMF5win2k12r2installdestination
        }
        Else {
            $WebClient = New-Object System.Net.WebClient
            $webclient.DownloadFile($Srv2k12R2WMF5, $WMF5win2k12r2installdestination)
        }
        
    #(WARNING: Requires Reboot & then this script needs to be ran again after the server reboot to complete successfully!!!)
    # Runs Standalone Update for the Windows Management Framework 5.0 for Server 2012 R2
    wusa "$workdir\Win8.1AndW2K12R2-KB3134758-x64.msu" /quiet /norestart | Out-Null
}
}

# Function checks the current .NET patch level on the system
Function Check-DotNetVersion {
[cmdletbinding()]
Param()
#checks .NET Framework version currently installed
    $dotNETversion = (Get-ItemProperty -Path 'HKLM:\Software\Microsoft\NET Framework Setup\NDP\v4\Full' -ErrorAction SilentlyContinue).Version
    $dotNETtrimmed = $dotNETversion -replace "......$"
    $dotNETdouble = $dotNETtrimmed -as [double]
        IF ($dotNETdouble -ge 4.5) {
            
            # Runs WMF5-Installer Function since .NET framework version should be high enough to run the WMF5-Installer
            WMF5-Installer
        }
        ELSE {
            # Downloads .NET 4.5 if not present
                $dotNET45 = "https://download.microsoft.com/download/E/2/1/E21644B5-2DF2-47C2-91BD-63C560427900/NDP452-KB2901907-x86-x64-AllOS-ENU.exe"
                $dotNET45installdestination = "$workdir\NDP452-KB2901907-x86-x64-AllOS-ENU.msu"
                
                IF (Get-Command 'Invoke-WebRequest'){
                    Invoke-WebRequest $dotNET45 -OutFile $dotNET45installdestination
                }
                Else {
                    $WebClient = New-Object System.Net.WebClient
                    $webclient.DownloadFile($dotNET45, $dotNET45installdestination)
                }
                
            # Windows update standalone installer to install .NET 4.5
            wusa "$workdir\NDP452-KB2901907-x86-x64-AllOS-ENU.msu" /quiet /norestart | Out-Null
            
            # Runs WMF5-Installer Function now that .NET framework version is high enough
            WMF5-Installer
        }
}

# This function checks the crrent PowerShell patch level: Looks for PS 5.0 or higher on system 
Function Check-PSVersion {
[cmdletbinding()]
Param()
If ($PSVersionTable.PSVersion -like '5.*') {
    Correct-PSVersion
}
ELSE {
    Check-DotNetVersion
    Correct-PSVersion
}    
}

# Function checks for the KB fix that is supposed to patch against these exploits
Function Check-Patch2008r2 {
[cmdletbinding()]
Param()
If (!(get-hotfix -id KB4056897)){
    # Downloads the Windows 2008 R2 Standalone Security Update
        IF (Get-Command 'Invoke-WebRequest'){
            Invoke-WebRequest $KB4056897 -OutFile $win2k8r2patchinstalldesination
        }
        Else {
            $WebClient = New-Object System.Net.WebClient
            $webclient.DownloadFile($KB4056897, $win2k8r2patchinstalldesination)
        }
    wusa "$workdir\KB4056897.msu" /quiet /norestart | Out-Null
}
Else {
    Return
}
}

# Function checks for the KB fix that is supposed to patch against these exploits
Function Check-Patch2012r2 {
[cmdletbinding()]
Param()
If (!(get-hotfix -id KB4056898)){
    # Downloads the Windows 2012 R2 Standalone Security Update
        IF (Get-Command 'Invoke-WebRequest'){
            Invoke-WebRequest $KB4056898 -OutFile $win2k12r2patchinstalldestination
        }
        Else {
            $WebClient = New-Object System.Net.WebClient
            $webclient.DownloadFile($KB4056898, $win2k12r2patchinstalldestination)
        }
    wusa "$workdir\KB4056898.msu" /quiet /norestart | Out-Null
}
Else {
    Return
}
}

# Function checks for the KB fix that is supposed to patch against these exploits
Function Check-Patch2016 {
[cmdletbinding()]
Param()
if (!(get-hotfix -id KB4056890)){
    # Downloads the Windows 2016 Standalone Security Update
        IF (Get-Command 'Invoke-WebRequest'){
            Invoke-WebRequest $KB4056890 -OutFile $win2k16patchinstalldestination
        }
        Else {
            $WebClient = New-Object System.Net.WebClient
            $webclient.DownloadFile($KB4056890, $win2k16patchinstalldestination)
        }
    wusa "$workdir\KB4056890.msu" /quiet /norestart | Out-Null
}
Else {
    Return
}
}

Function Main {
[cmdletbinding()]
Param()
# Forces bypass of Execution policy so the remaining scripts will run
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force

# Uncomment to turn on debug mode on the script for troubleshoooting issues
Set-PSDebug -Trace 1

# Setting to turn off strictmode
Set-StrictMode -off

# Creates a variable that gets the version of the Operating System that the script is running on
# Need to use `$OSVersion.Caption` variable to return the Correct OS from below command
$OSVersion = Get-WmiObject -Class Win32_OperatingSystem

# Creates a temp directory for downloading and running installers on the system
$workdir = "C:\Temp\"
If (Test-Path -Path $workdir -PathType Container)
{ Write-Host "$workdir already exists" -ForegroundColor Red}
ELSE
{ New-Item -Path $workdir  -ItemType directory }

# Main Function that downloads and installs the correct patch for each OS if it's not present 
IF ($OSVersion.Caption -Like "Microsoft Windows Server 2008 R2*") {
    # Runs Check-Patch function
    Check-Patch2008r2

    # Runs check-PSVersion function
    Check-PSVersion

    # Runs the Module to check Exploit Vulernability
    Get-SpeculationControlSettings
}
ELSEIF ($OSVersion.Caption -like "Microsoft Windows Server 2012 R2*"){
    # Runs Check-Patch function
    Check-Patch2012r2

    # Runs check-PSVersion function
    Check-PSVersion

    # Runs the Module to check Exploit Vulernability
    Get-SpeculationControlSettings
}
ELSEIF ($OSVersion.Caption -like "Microsoft Windows Server 2016*") {
    # Runs Check-Patch function
    Check-Patch2016

    # Runs check-PSVersion function
    Check-PSVersion

    # Runs the Module to check Exploit Vulernability
    Get-SpeculationControlSettings
}
ELSE {
    #Server not supported or no Patch has been made yet
    Write-Host "You're Running an Operating System that is either not supported or does not have a patch available from Microsoft yet."
}
}

# Runs the Main Function
Main
}